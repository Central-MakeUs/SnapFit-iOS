//
//  LoginPresenterTests.swift
//  SnapFit
//
//  Created by 정정욱 on 7/26/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import XCTest
@testable import SnapFit

// Mock Worker
class MockLoginWorker: LoginWorkingLogic {
    var createUserCalled = false
    var createUserResponse: Result<Tokens, ApiError>?
    
    func createUser(request: Login.LoadLogin.Request) -> AnyPublisher<Tokens, ApiError> {
        createUserCalled = true
        return createUserResponse?.publisher ?? Fail(error: ApiError.unknown(nil)).eraseToAnyPublisher()
    }
}

// Mock Presenter
class MockLoginPresenter: LoginPresentationLogic {
    var presentKakaoLoginSuccessCalled = false
    var presentKakaoLoginFailureCalled = false
    var presentAppleLoginSuccessCalled = false
    var presentAppleLoginFailureCalled = false
    var presentUserCreatedCalled = false
    var presentUserCreationFailedCalled = false
    
    func presentKakaoLoginSuccess(_ oauthToken: String) {
        presentKakaoLoginSuccessCalled = true
    }
    
    func presentKakaoLoginFailure(_ error: Error) {
        presentKakaoLoginFailureCalled = true
    }
    
    func presentAppleLoginSuccess(_ credential: ASAuthorizationAppleIDCredential) {
        presentAppleLoginSuccessCalled = true
    }
    
    func presentAppleLoginFailure(_ error: Error) {
        presentAppleLoginFailureCalled = true
    }
    
    func presentUserCreated(_ tokens: Tokens) {
        presentUserCreatedCalled = true
    }
    
    func presentUserCreationFailed(_ error: ApiError) {
        presentUserCreationFailedCalled = true
    }
}

class LoginInteractorTests: XCTestCase {
    var interactor: LoginInteractor!
    var mockWorker: MockLoginWorker!
    var mockPresenter: MockLoginPresenter!

    override func setUp() {
        super.setUp()
        mockWorker = MockLoginWorker()
        mockPresenter = MockLoginPresenter()
        interactor = LoginInteractor(worker: mockWorker, presenter: mockPresenter)
    }

    override func tearDown() {
        interactor = nil
        mockWorker = nil
        mockPresenter = nil
        super.tearDown()
    }

    func testCreateUserSuccess() {
        // Given
        let expectedToken = Tokens(accessToken: "mockToken")
        mockWorker.createUserResponse = .success(expectedToken)
        
        let request = Login.LoadLogin.Request(
            social: "kakao",
            nickName: "TestUser",
            isMarketing: true,
            oauthToken: "mockOauthToken"
        )
        
        // When
        interactor.createUser(request: request)
        
        // Then
        XCTAssertTrue(mockWorker.createUserCalled, "createUser should be called on the worker.")
        XCTAssertTrue(mockPresenter.presentUserCreatedCalled, "presentUserCreated should be called on the presenter.")
    }

    func testCreateUserFailure() {
        // Given
        mockWorker.createUserResponse = .failure(.unknown(nil))
        
        let request = Login.LoadLogin.Request(
            social: "kakao",
            nickName: "TestUser",
            isMarketing: true,
            oauthToken: "mockOauthToken"
        )
        
        // When
        interactor.createUser(request: request)
        
        // Then
        XCTAssertTrue(mockWorker.createUserCalled, "createUser should be called on the worker.")
        XCTAssertTrue(mockPresenter.presentUserCreationFailedCalled, "presentUserCreationFailed should be called on the presenter.")
    }
}
